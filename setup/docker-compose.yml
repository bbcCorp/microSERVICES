version: "3"
services:

  postgresql-server:
    image: postgres:alpine
    container_name: 'microservice-pgsql-server'
    restart: always
    ports:
      - 5433:5432 
    volumes:
      - ./data/postgres/db:/var/lib/postgresql/data
      - ./data/postgres/logs:/var/log/postgresql
    environment:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: microSERVICE   
      PGDATA: /var/lib/postgresql/data/pgdata       
    networks:
      - microservices-backend
      # Uncomment the following line if you want external access to the postgresql server
      # - microservices-frontend      

  mongodb-server:
    image: mongo
    container_name: 'microservice-mongo-server'
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pwd123      
    volumes: 
      - ./data/mongo/db:/data/db  
      - ./data/mongo/logs:/var/log/mongodb
    networks:
      - microservices-backend
      # Uncomment the following line if you want external access to the mongodb server
      # - microservices-frontend


  # Run the spotify/kafka image which contains both kafka and zookeeper
  kafka-server:
    image: spotify/kafka
    container_name: 'microservice-kafka-server'
    hostname: kafka-server
    ports:
        - "2181:2181"
        - "9092:9092"
    environment:
      - ADVERTISED_HOST=kafka-server
      - ADVERTISED_PORT=9092
      - TOPICS=MICROSERVICE-CUSTOMER-EMAIL-NOTIFICATION,MICROSERVICE-CUSTOMER-EMAIL-NOTIFICATION-FAILED,MICROSERVICE-CUSTOMER-UPDATES
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock  
    deploy:
      replicas: 1
      restart_policy:
        # Immediately restart containers if one fails.
        condition: on-failure
    networks:
      - microservices-backend
      # - microservices-frontend      

  customer-api:
    image: microservices-api-customers:1.0.0
    container_name: 'microservices-customer-api'
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MICROSERVICES_Kestrel__EndPoints__Http__Url=http://*:5000;
      - MICROSERVICES_Kestrel__EndPoints__Https__Url=https://*:5001
      # Update the following config with your cert details      
      - MICROSERVICES_Kestrel__Certificates__Default__Path=/app/https/aspnetapp.pfx
      - MICROSERVICES_Kestrel__Certificates__Default__Password=crypticpassword        
      - MICROSERVICES_KafkaService__Server=kafka-server:9092
      - MICROSERVICES_ConnectionStrings__CustomerDb__url=mongodb://root:pwd123@mongodb-server:27017
      - MICROSERVICES_Logging__LogFolder=/app/data/log
    depends_on:
      - mongodb-server
      - kafka-server
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.50"
          memory: 500M
      restart_policy:
        # Immediately restart containers if one fails.
        condition: on-failure
        max_attempts: 3
        window: 120s
    ports:
      - 8090:5000
      - 8091:5001     
    volumes: 
      - ./data/api-customers:/app/data   
      - ./certs:/app/https/    
    networks:      
      - microservices-backend
      # Uncomment the following line if you want external access to the API service
      # - microservices-frontend

  webapp-customermgmt:
    image: microservices-web-customermgmt:1.0.0
    container_name: 'microservices-web-customermgmt'
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MICROSERVICES_Kestrel__EndPoints__Http__Url=http://*:5000
      - MICROSERVICES_Kestrel__EndPoints__Https__Url=https://*:5001      
      # Update the following config with your cert details      
      - MICROSERVICES_Kestrel__Certificates__Default__Path=/app/https/aspnetapp.pfx
      - MICROSERVICES_Kestrel__Certificates__Default__Password=crypticpassword      
      - MICROSERVICES_API_URL=http://customer-api/api/customers
      - MICROSERVICES_Logging__LogFolder=/app/data/log
    depends_on:
      - customer-api
      - postgresql-server
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 500M
      restart_policy:
        # Immediately restart containers if one fails.
        condition: on-failure
        max_attempts: 3
        window: 120s
    ports:
      - 8080:5000
      - 8081:5001     
    volumes: 
      - ./data/webapp-customermgmt:/app/data  
      - ./certs:/app/https/     
    networks:
      - microservices-frontend
      - microservices-backend

  microservices-service-notification:
    image: microservices-service-notification:1.0.0
    container_name: 'microservices-service-notification'
    environment:
      - MICROSERVICES_KafkaService__Server=kafka-server:9092
      - MICROSERVICES_Logging__LogFolder=/app/data/log
      - MICROSERVICES_SmtpService__UserID=TODO***FILL_THIS      
      - MICROSERVICES_SmtpService__Password=TODO***FILL_THIS
    depends_on:
      - kafka-server
      - mongodb-server
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 500M
      restart_policy:
        # Immediately restart containers if one fails.
        condition: on-failure
        max_attempts: 3
        window: 120s
    volumes: 
      - ./data/service-notification:/app/data       
    networks:
      - microservices-frontend
      - microservices-backend

  microservices-service-replication:
    image: microservices-service-replication:1.0.0
    container_name: 'microservices-service-replication'
    environment:
      - MICROSERVICES_ConnectionStrings__CustomerDb__url=mongodb://root:pwd123@mongodb-server:27017
      - MICROSERVICES_KafkaService__Server=kafka-server:9092
      - MICROSERVICES_ElasticService__ServerUrl=http://elasticsearch-server:9200
      - MICROSERVICES_Logging__LogFolder=/app/data/log
    depends_on:
      - kafka-server
      - mongodb-server
      - elasticsearch-server
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 500M
      restart_policy:
        # Immediately restart containers if one fails.
        condition: on-failure
        max_attempts: 3
        window: 120s
    volumes: 
      - ./data/service-replication:/app/data       
    networks:
      - microservices-backend

  elasticsearch-server:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
    container_name: 'microservice-search-server'
    environment:
      - discovery.type=single-node
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    ports:
      - 9200:9200
      - 9300:9300 
    networks:
      - microservices-backend
      # Uncomment the following line if you want external access for the elasticsearch
      # - microservices-frontend


  # Run the identity STS service
  identity-sts:
    image: microservices-service-sts:1.0.0
    container_name: 'microservices-service-sts'
    hostname: identity-sts
    ports:
        - "8099:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MICROSERVICES_Kestrel__EndPoints__Http__Url=http://*:5000
      - MICROSERVICES_Kestrel__EndPoints__Https__Url=https://*:5001       
      # Update the following config with your cert details      
      - MICROSERVICES_Kestrel__Certificates__Default__Path=/app/https/aspnetapp.pfx
      - MICROSERVICES_Kestrel__Certificates__Default__Password=crypticpassword         
      - MICROSERVICES_ConnectionStrings__IdentityDbConnection=Host=postgresql-server;Database=microSERVICE;User ID=postgres;Password=postgres123;Application Name=microSERVICE;Search Path=identity;Pooling=true;Minimum Pool Size=5;Maximum Pool Size=100;
      - MICROSERVICES_WebClient__ClientId=customermgmt
      - MICROSERVICES_WebClient__ClientName=CustomerMgmt Web Application
      - MICROSERVICES_WebClient__RedirectUris=http://webapp-customermgmt/signin-oidc
      - MICROSERVICES_WebClient__FrontChannelLogoutUri=http://webapp-customermgmt/signout-oidc
      - MICROSERVICES_WebClient__PostLogoutRedirectUris=http://webapp-customermgmt/signout-callback-oidc    
    depends_on:
      - postgresql-server
      # - webapp-customermgmt      
    volumes: 
      - ./data/identity-sts:/app/data  
    networks:
      - microservices-backend
      - microservices-frontend

networks:
  microservices-frontend:
    driver: bridge
  microservices-backend:
    # internal: true
    driver: bridge
